{"version":3,"sources":["Components/Searchbar/Searchbar.js","Components/ImageGalleryItem/ImageGalleryItem.js","Components/Button/Button.js","Components/Modal/Modal.js","Services/pixabay-api.js","Components/Loader/Loader.js","Components/ImageGallery/ImageGallery.js","App.js","reportWebVitals.js","index.js"],"names":["Searchbar","state","value","errToast","msg","toast","error","handleChange","e","setState","target","clearStateValue","handleSubmit","preventDefault","trim","props","onSubmit","this","className","type","autoComplete","autoFocus","placeholder","onChange","Component","ImageGalleryItem","img","alt","onClick","largeImg","src","Button","action","modalRoot","document","querySelector","Modal","handleKeyDown","key","handleBackDropClick","currentTarget","window","addEventListener","removeEventListener","createPortal","fetchImages","query","page","url","fetch","then","r","ok","json","Promise","reject","Error","Loader","size","color","height","width","timeout","ImageGallery","loadingMore","openModal","scroll","scrollTo","top","documentElement","scrollHeight","behavior","loadingMoreOn","loadingMoreOff","toggleModal","prevState","setLargeImg","galleryGeneration","images","length","map","webformatURL","largeImageURL","tags","id","LoadMore","pageIncrement","prevProps","changeStatus","currentPage","getImg","addImages","apiServices","catch","finally","status","App","setQuery","hits","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+QAIqBA,G,kNACnBC,MAAQ,CACNC,MAAO,I,EAGTC,SAAW,SAAAC,GAAG,OAAIC,IAAMC,MAAMF,I,EAE9BG,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEP,MAAOM,EAAEE,OAAOR,S,EAGlCS,gBAAkB,kBAAM,EAAKF,SAAS,CAAEP,MAAO,M,EAE/CU,aAAe,SAAAJ,GACbA,EAAEK,iBACF,IAAMX,EAAQ,EAAKD,MAAMC,MAAMY,OACjB,KAAVZ,GAIJ,EAAKa,MAAMC,SAASd,GACpB,EAAKS,mBAJH,EAAKR,SAAS,oF,uDAOR,IACAD,EAAUe,KAAKhB,MAAfC,MAER,OACE,wBAAQgB,UAAU,YAAlB,SACE,uBAAMA,UAAU,aAAaF,SAAUC,KAAKL,aAA5C,UACE,wBAAQO,KAAK,SAASD,UAAU,oBAAhC,SACE,sBAAMA,UAAU,0BAAhB,sBAGF,uBACEA,UAAU,mBACVC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,2BACZpB,MAAOA,EACPqB,SAAUN,KAAKV,wB,GAzCYiB,cCFxB,SAASC,EAAT,GAA4D,IAAhCC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAC5D,OACE,oBAAIX,UAAU,mBAAd,SACE,qBACEY,IAAKJ,EACLC,IAAKA,EACLT,UAAU,yBACVU,QAAS,kBAAMA,EAAQD,EAAKE,QCNrB,SAASE,EAAT,GAA6B,IAAXC,EAAU,EAAVA,OAC/B,OACE,qBAAKd,UAAU,WAAf,SACE,wBAAQA,UAAU,SAASU,QAASI,EAApC,yBCFN,IAAMC,EAAYC,SAASC,cAAc,eACpBC,E,4MAQnBC,cAAgB,SAAA7B,GACA,WAAVA,EAAE8B,KAAkB,EAAKvB,MAAMa,W,EAGrCW,oBAAsB,SAAA/B,GAChBA,EAAEE,SAAWF,EAAEgC,eAAe,EAAKzB,MAAMa,W,kEAX7Ca,OAAOC,iBAAiB,UAAWzB,KAAKoB,iB,6CAGxCI,OAAOE,oBAAoB,UAAW1B,KAAKoB,iB,+BAWnC,IAAD,EACcpB,KAAKF,MAAlBe,EADD,EACCA,IAAKH,EADN,EACMA,IACb,OAAOiB,uBACL,qBAAK1B,UAAU,UAAUU,QAASX,KAAKsB,oBAAvC,SACE,qBAAKrB,UAAU,QAAf,SACE,qBAAKY,IAAKA,EAAKH,IAAKA,QAGxBM,O,GAxB6BT,aCSpBqB,MAVf,SAAqBC,EAAOC,GAC1B,IAAMC,EAAG,UALM,2BAKN,cAAoBF,EAApB,iBAAkCC,EAAlC,gBAJC,qCAID,6DAHG,IAIZ,OAAOE,MAAMD,GAAKE,MAAK,SAAAC,GACrB,OAAIA,EAAEC,GACGD,EAAEE,OAEJC,QAAQC,OAAO,IAAIC,MAAM,qG,uBCJrB,SAASC,EAAT,GAA2B,IAATC,EAAQ,EAARA,KAC/B,OACE,qBAAKxC,UAAU,SAAf,SACE,cAAC,IAAD,CACEC,KAAK,OACLwC,MAAM,UACNC,OAAQF,EACRG,MAAOH,EACPI,QAAS,Q,ICNIC,E,4MACnB9D,MAAQ,CACNK,MAAO,KACP0D,aAAa,EACbC,WAAW,EACXpC,SAAU,I,EAeZqC,OAAS,WACPzB,OAAO0B,SAAS,CACdC,IAAKlC,SAASmC,gBAAgBC,aAC9BC,SAAU,Y,EAIdC,cAAgB,WACd,EAAK/D,SAAS,CAAEuD,aAAa,K,EAG/BS,eAAiB,WACf,EAAKhE,SAAS,CAAEuD,aAAa,K,EAuB/BU,YAAc,SAAAlE,GACZ,EAAKC,UAAS,SAAAkE,GAAS,MAAK,CAC1BV,WAAYU,EAAUV,e,EAI1BW,YAAc,SAACjD,EAAKD,GAClB,EAAKjB,SAAS,CAAEoB,SAAU,CAAEF,MAAKD,SACjC,EAAKgD,e,EAGPG,kBAAoB,WAAO,IACjBC,EAAW,EAAK/D,MAAhB+D,OACAd,EAAgB,EAAK/D,MAArB+D,YAER,OAAIc,EAAOC,OAAS,EAEhB,qCACE,oBAAI7D,UAAU,eAAd,SACG4D,EAAOE,KAAI,SAAAtD,GAAG,OACb,cAACD,EAAD,CAEEC,IAAKA,EAAIuD,aACTpD,SAAUH,EAAIwD,cACdvD,IAAKD,EAAIyD,KACTvD,QAAS,EAAKgD,aAJTlD,EAAI0D,UAQbpB,GAAe,cAACjC,EAAD,CAAQC,OAAQ,EAAKqD,WACrCrB,GAAe,cAACP,EAAD,CAAQC,KAAM,QAKlC,qBAAKxC,UAAU,aAAf,yM,EAIJmE,SAAW,WACT,EAAKb,gBACL,EAAKzD,MAAMuE,iB,iEAxFMC,EAAWZ,GAAY,IAAD,EACM1D,KAAKF,MAA1CyE,EAD+B,EAC/BA,aAAc1C,EADiB,EACjBA,MAAO2C,EADU,EACVA,YACzBF,EAAUzC,QAAUA,IACtB0C,EAAa,WACbvE,KAAKyE,OAAO5C,IAGVyC,EAAUE,YAAcA,GAC1BxE,KAAKyE,OAAO5C,K,6BAmBTA,GAAQ,IAAD,SACqC7B,KAAKF,MAA9CyE,EADI,EACJA,aAAcC,EADV,EACUA,YAAaE,EADvB,EACuBA,UAEnCC,EAAY9C,EAAO2C,GAChBvC,MAAK,SAAA4B,GACJa,EAAUb,GACVU,EAAa,eAEdK,OAAM,SAAAvF,GACL,EAAKG,SAAS,CAAEH,UAChBkF,EAAa,eAEdM,SAAQ,WACH,EAAK7F,MAAM+D,cACb,EAAKE,SACL,EAAKO,uB,+BAiDH,IAAD,EACgCxD,KAAKhB,MAApCK,EADD,EACCA,MAAO2D,EADR,EACQA,UAAWpC,EADnB,EACmBA,SAClBkE,EAAW9E,KAAKF,MAAhBgF,OAER,MAAe,SAAXA,EACK,wBAGM,YAAXA,EAEA,8BACE,cAACtC,EAAD,CAAQC,KAAM,QAKL,aAAXqC,EACK,8HAAyBzF,KAGnB,aAAXyF,EAEA,gCACG9B,GACC,cAAC,EAAD,CACErC,QAASX,KAAKyD,YACd5C,IAAKD,EAASH,IACdC,IAAKE,EAASF,MAGjBV,KAAK4D,4BAVZ,M,GAvHsCrD,aCIrBwE,E,4MACnB/F,MAAQ,CACN6E,OAAQ,GACRW,YAAa,EACb3C,MAAO,GACPiD,OAAQ,Q,EAGVT,cAAgB,WAEd,EAAK7E,UAAS,SAAAkE,GAAS,MAAK,CAC1Bc,YAAad,EAAUc,YAAc,O,EAIzCQ,SAAW,SAAA/F,GAELA,IAAU,EAAKD,MAAM6C,OACvB,EAAKrC,SAAS,CAAEqC,MAAO5C,EAAO4E,OAAQ,GAAIW,YAAa,K,EAI3DD,aAAe,SAAAO,GACb,EAAKtF,SAAS,CAAEsF,OAAQA,K,EAG1BJ,UAAY,SAAAb,GAEV,EAAKrE,UAAS,SAAAkE,GAAS,MAAK,CAC1BG,OAAO,GAAD,mBAAMH,EAAUG,QAAhB,YAA2BA,EAAOoB,Y,uDAIlC,IAAD,EACwCjF,KAAKhB,MAA5C6C,EADD,EACCA,MAAOiD,EADR,EACQA,OAAQjB,EADhB,EACgBA,OAAQW,EADxB,EACwBA,YAC/B,OACE,sBAAKvE,UAAU,MAAf,UACE,cAAC,EAAD,CAAWF,SAAUC,KAAKgF,WAE1B,cAAC,EAAD,CACEnD,MAAOA,EACPiD,OAAQA,EACRP,aAAcvE,KAAKuE,aACnBF,cAAerE,KAAKqE,cACpBR,OAAQA,EACRW,YAAaA,EACbE,UAAW1E,KAAK0E,YAGlB,cAAC,IAAD,W,GAjDyBnE,aCAlB2E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnD,MAAK,YAAkD,IAA/CoD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3E,SAAS4E,eAAe,SAM1BX,M","file":"static/js/main.ddce8579.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default class Searchbar extends Component {\r\n  state = {\r\n    value: '',\r\n  };\r\n\r\n  errToast = msg => toast.error(msg);\r\n\r\n  handleChange = e => {\r\n    this.setState({ value: e.target.value });\r\n  };\r\n\r\n  clearStateValue = () => this.setState({ value: '' });\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const value = this.state.value.trim();\r\n    if (value === '') {\r\n      this.errToast('Введите запрос');\r\n      return;\r\n    }\r\n    this.props.onSubmit(value);\r\n    this.clearStateValue();\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n            value={value}\r\n            onChange={this.handleChange}\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nexport default function ImageGalleryItem({ img, alt, onClick, largeImg }) {\r\n  return (\r\n    <li className=\"ImageGalleryItem\">\r\n      <img\r\n        src={img}\r\n        alt={alt}\r\n        className=\"ImageGalleryItem-image\"\r\n        onClick={() => onClick(alt, largeImg)}\r\n      />\r\n    </li>\r\n  );\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  img: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  largeImg: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Button({ action }) {\r\n  return (\r\n    <div className=\"LoadMore\">\r\n      <button className=\"Button\" onClick={action}>\r\n        Load more\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  action: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { Component } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\nexport default class Modal extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  handleKeyDown = e => {\r\n    if (e.key === 'Escape') this.props.onClick();\r\n  };\r\n\r\n  handleBackDropClick = e => {\r\n    if (e.target === e.currentTarget) this.props.onClick();\r\n  };\r\n\r\n  render() {\r\n    const { src, alt } = this.props;\r\n    return createPortal(\r\n      <div className=\"Overlay\" onClick={this.handleBackDropClick}>\r\n        <div className=\"Modal\">\r\n          <img src={src} alt={alt} />\r\n        </div>\r\n      </div>,\r\n      modalRoot,\r\n    );\r\n  }\r\n}\r\n\r\nModal.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  src: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n};\r\n","const BASE_URL = 'https://pixabay.com/api/';\r\nconst KEY = '19101483-97eb89a6c64111aa623235b5f';\r\nlet perPage = 12;\r\n\r\nfunction fetchImages(query, page) {\r\n  const url = `${BASE_URL}?q=${query}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=${perPage}`;\r\n  return fetch(url).then(r => {\r\n    if (r.ok) {\r\n      return r.json();\r\n    }\r\n    return Promise.reject(new Error('Ничего не найдено'));\r\n  });\r\n}\r\n\r\nexport default fetchImages;\r\n","import PropTypes from 'prop-types';\r\nimport Spinner from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nimport React from 'react';\r\n\r\nexport default function Loader({ size }) {\r\n  return (\r\n    <div className=\"Loader\">\r\n      <Spinner\r\n        type=\"Bars\"\r\n        color=\"#3F51B5\"\r\n        height={size}\r\n        width={size}\r\n        timeout={3000} //3 secs\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nLoader.propTypes = { size: PropTypes.number.isRequired };\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ImageGalleryItem from '../ImageGalleryItem';\r\nimport Button from '../Button';\r\nimport Modal from '../Modal';\r\nimport apiServices from '../../Services/pixabay-api';\r\nimport Loader from '../Loader';\r\nexport default class ImageGallery extends Component {\r\n  state = {\r\n    error: null,\r\n    loadingMore: false,\r\n    openModal: false,\r\n    largeImg: {},\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { changeStatus, query, currentPage } = this.props;\r\n    if (prevProps.query !== query) {\r\n      changeStatus('pending');\r\n      this.getImg(query);\r\n    }\r\n\r\n    if (prevProps.currentPage < currentPage) {\r\n      this.getImg(query);\r\n    }\r\n  }\r\n\r\n  scroll = () => {\r\n    window.scrollTo({\r\n      top: document.documentElement.scrollHeight,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  loadingMoreOn = () => {\r\n    this.setState({ loadingMore: true });\r\n  };\r\n\r\n  loadingMoreOff = () => {\r\n    this.setState({ loadingMore: false });\r\n  };\r\n\r\n  getImg(query) {\r\n    const { changeStatus, currentPage, addImages } = this.props;\r\n\r\n    apiServices(query, currentPage)\r\n      .then(images => {\r\n        addImages(images);\r\n        changeStatus('resolved');\r\n      })\r\n      .catch(error => {\r\n        this.setState({ error });\r\n        changeStatus('rejected');\r\n      })\r\n      .finally(() => {\r\n        if (this.state.loadingMore) {\r\n          this.scroll();\r\n          this.loadingMoreOff();\r\n        }\r\n      });\r\n  }\r\n\r\n  toggleModal = e => {\r\n    this.setState(prevState => ({\r\n      openModal: !prevState.openModal,\r\n    }));\r\n  };\r\n\r\n  setLargeImg = (alt, img) => {\r\n    this.setState({ largeImg: { alt, img } });\r\n    this.toggleModal();\r\n  };\r\n\r\n  galleryGeneration = () => {\r\n    const { images } = this.props;\r\n    const { loadingMore } = this.state;\r\n\r\n    if (images.length > 0) {\r\n      return (\r\n        <>\r\n          <ul className=\"ImageGallery\">\r\n            {images.map(img => (\r\n              <ImageGalleryItem\r\n                key={img.id}\r\n                img={img.webformatURL}\r\n                largeImg={img.largeImageURL}\r\n                alt={img.tags}\r\n                onClick={this.setLargeImg}\r\n              />\r\n            ))}\r\n          </ul>\r\n          {!loadingMore && <Button action={this.LoadMore} />}\r\n          {loadingMore && <Loader size={50} />}\r\n        </>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"MsgNothing\">По вашему запросу ничего не найдено!</div>\r\n    );\r\n  };\r\n\r\n  LoadMore = () => {\r\n    this.loadingMoreOn();\r\n    this.props.pageIncrement();\r\n  };\r\n\r\n  render() {\r\n    const { error, openModal, largeImg } = this.state;\r\n    const { status } = this.props;\r\n\r\n    if (status === 'idle') {\r\n      return <div></div>;\r\n    }\r\n\r\n    if (status === 'pending') {\r\n      return (\r\n        <div>\r\n          <Loader size={150} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (status === 'rejected') {\r\n      return <div>{`Возникла ошибка ${error}`}</div>;\r\n    }\r\n\r\n    if (status === 'resolved') {\r\n      return (\r\n        <div>\r\n          {openModal && (\r\n            <Modal\r\n              onClick={this.toggleModal}\r\n              src={largeImg.img}\r\n              alt={largeImg.alt}\r\n            />\r\n          )}\r\n          {this.galleryGeneration()}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  query: PropTypes.string.isRequired,\r\n  status: PropTypes.string.isRequired,\r\n  changeStatus: PropTypes.func.isRequired,\r\n  pageIncrement: PropTypes.func.isRequired,\r\n  images: PropTypes.arrayOf(\r\n    PropTypes.shape({ id: PropTypes.number.isRequired }),\r\n  ).isRequired,\r\n  currentPage: PropTypes.number.isRequired,\r\n  addImages: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport Searchbar from './Components/Searchbar';\r\nimport ImageGallery from './Components/ImageGallery';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n// import ImageGalleryItem from './Components/ImageGalleryItem';\r\n// import Loader from './Components/Loader';\r\n// import Modal from './Components/Modal';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    images: [],\r\n    currentPage: 1,\r\n    query: '',\r\n    status: 'idle',\r\n  };\r\n\r\n  pageIncrement = () => {\r\n    //увеличивает страницу при нажатии на кнопку \"показать еще\"\r\n    this.setState(prevState => ({\r\n      currentPage: prevState.currentPage + 1,\r\n    }));\r\n  };\r\n\r\n  setQuery = value => {\r\n    //обновляет query и ресетит images и currentPage при новом запросе\r\n    if (value !== this.state.query) {\r\n      this.setState({ query: value, images: [], currentPage: 1 });\r\n    }\r\n  };\r\n\r\n  changeStatus = status => {\r\n    this.setState({ status: status });\r\n  };\r\n\r\n  addImages = images => {\r\n    //добавляет новые изображения в стейт с сохранением предыдущего значения\r\n    this.setState(prevState => ({\r\n      images: [...prevState.images, ...images.hits],\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { query, status, images, currentPage } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <Searchbar onSubmit={this.setQuery} />\r\n\r\n        <ImageGallery\r\n          query={query}\r\n          status={status}\r\n          changeStatus={this.changeStatus}\r\n          pageIncrement={this.pageIncrement}\r\n          images={images}\r\n          currentPage={currentPage}\r\n          addImages={this.addImages}\r\n        />\r\n\r\n        <ToastContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}